using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using T4TS.Tests.Fixtures.Basic;
using T4TS.Tests.Utils;

namespace T4TS.Tests.Fixtures.Methods
{
    [TestClass]
    public class MethodsTest
    {
        [TestMethod]
        public void BasicModelHasExpectedOutputDirect()
        {
            // Expect
            new OutputForDirectBuilder(
                typeof(BasicModel))
                    .Edit((builder) =>
                    {
                        builder.DirectSettings.NamespaceToModuleMap.Add(
                            typeof(BasicModel).Namespace,
                            "T4TS");
                        builder.TraverserSettings.TypeDecorators.Add((outputType) =>
                        {
                            string otherTypeLiteral = "T4TSTests.OtherType";
                            outputType.Methods.Add(T4TS.Outputs.Custom.ChangeCaseCopyMethod.Create(
                                builder.OutputSettings,
                                builder.TypeContext,
                                name: "FromOther",
                                containingType: outputType,
                                otherTypeLiteral: otherTypeLiteral,
                                toContainingType: true,
                                toCamelCase: false));

                            outputType.Methods.Add(T4TS.Outputs.Custom.ChangeCaseCopyMethod.Create(
                                builder.OutputSettings,
                                builder.TypeContext,
                                name: "ToOther",
                                containingType: outputType,
                                otherTypeLiteral: otherTypeLiteral,
                                toContainingType: false,
                                toCamelCase: true));
                        });
                    })
                    .ToEqual(ExpectedOutputDirect);
        }

        private const string ExpectedOutputDirect = @"/****************************************************************************
  Generated by T4TS.tt - don't make any changes in this file
****************************************************************************/

declare module T4TS {
    /** Generated from T4TS.Tests.Fixtures.Basic.BasicModel **/
    export interface BasicModel {
        MyProperty: number;
        SomeDateTime: string;
        static FromOther( other: T4TS.BasicModel): T4TS.BasicModel
        {
            T4TSTests.OtherType result = new T4TSTests.OtherType();
            result.MyProperty = other.myProperty;
            result.SomeDateTime = other.someDateTime;
            return result;
        }
        ToOther(): T4TSTests.OtherType
        {
            T4TSTests.OtherType result = new T4TSTests.OtherType();
            result.myProperty = this.MyProperty;
            result.someDateTime = this.SomeDateTime;
            return result;
        }
    }
}";
    }
}
